management:
  endpoint:
    beans:
      enabled: true
    health:
      enabled: true
    
    metrics:
      enabled: true
    
    prometheus:
      enabled: true

    loggers:
      enabled: true

  endpoints:
    web:
      exposure:
        include: "*"

  metrics:
    export:
      prometheus:
        enabled: true

spring:
  main:
    banner-mode: "off"
    allow-bean-definition-overriding: true
  
  application:
    name: census

  profiles:
    active: ${PROFILE:default}

resilience4j.circuitbreaker:
    configs:
        default:
            registerHealthIndicator: true
            slidingWindowSize: 10
            minimumNumberOfCalls: 5
            permittedNumberOfCallsInHalfOpenState: 3
            automaticTransitionFromOpenToHalfOpenEnabled: true
            waitDurationInOpenState: 30s
            failureRateThreshold: 50
            eventConsumerBufferSize: 100
            recordExceptions:
                - org.springframework.web.client.HttpServerErrorException
                - java.io.IOException
                - br.com.trevezani.commons.exception.ServiceNotAvailableException
            ignoreExceptions:
                - br.com.trevezani.commons.exception.BusinessException
                - br.com.trevezani.commons.exception.InternalErrorException
    instances:
        backendA:
            baseConfig: default
        backendB:
            baseConfig: default
            minimumNumberOfCalls: 10
            
resilience4j.retry:
    configs:
        default:
            enableExponentialBackoff: true
            maxRetryAttempts: 3
            waitDuration: 5s
            retryExceptions:
                - org.springframework.web.client.HttpServerErrorException
                - java.io.IOException
                - br.com.trevezani.commons.exception.ServiceNotAvailableException
            ignoreExceptions:
                - br.com.trevezani.commons.exception.BusinessException
                - br.com.trevezani.commons.exception.InternalErrorException
    instances:
        backendA:
            baseConfig: default
        backendB:
            baseConfig: default
            maxRetryAttempts: 5
  
---
spring:
  profiles: default

server:
  port: ${SERVER.PORT:1301}
    
  
---
spring:
  profiles: eureka

server:
  port: ${SERVER.PORT:1301}
        
eureka:
  client:
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://${EUREKA.USER:admin}:${EUREKA.PASS:admin}@${EUREKA.URI1:localhost:8761}/eureka,http://${EUREKA.USER:admin}:${EUREKA.PASS:admin}@${EUREKA.URI2:localhost:8761}/eureka

    healthcheck:
      enabled: true

  instance:
    leaseRenewalIntervalInSeconds: 10
    leaseExpirationDurationInSeconds: 30
    preferIpAddress: true
        